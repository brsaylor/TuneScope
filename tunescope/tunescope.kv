#:import ScrollEffect kivy.effects.scroll.ScrollEffect

#:import Player tunescope.player.Player
#:import PitchPlot tunescope.visualization.PitchPlot
#:import IconButton tunescope.widgets.IconButton
#:import VerticalSeparator tunescope.widgets.VerticalSeparator

#:set icon_size ('40dp', '40dp')
#:set small_icon_size ('32dp', '32dp')

<MainWindow>:

    BoxLayout:
        width: root.width
        height: root.height
        orientation: 'vertical'


        # Main toolbar
        BoxLayout:
            orientation: 'horizontal'
            size_hint_y: None
            height: '48dp'
            padding: '8dp', '8dp'
            spacing: '8dp'

            canvas.before:
                Color:
                    rgba: 0.5, 0.5, 0.5, 0.3
                Rectangle:
                    pos: self.pos
                    size: self.size
            Button:
                text: "Open"
                on_release: root.show_open_dialog()


        # Media info bar
        BoxLayout:
            orientation: 'vertical'
            size_hint_y: None
            height: self.minimum_height
            padding: '8dp', '8dp'
            spacing: '8dp'
            canvas.before:
                Color:
                    rgba: 0.5, 0.5, 0.5, 0.5
                Rectangle:
                    pos: self.pos
                    size: self.size
            Label:
                text: app.player.title
                size_hint_y: None
                size: self.texture_size
                text_size: self.size
                halign: 'left'
                font_size: '20sp'
            Label:
                text: "{} - [i]{}[/i]".format(app.player.artist, app.player.album)
                markup: True
                size_hint_y: None
                size: self.texture_size
                text_size: self.size
                halign: 'left'


        # Scrolling pitch plot
        ScrollView:
            id: scroll_view
            scroll_type: ['bars', 'content']
            bar_width: '8dp'
            bar_color: 0.7, 0.7, 0.7, 0.9
            bar_inactive_color: 0.7, 0.7, 0.7, 0.6

            scroll_x: (app.player.position / app.player.duration) if app.player.duration > 0 else 0

            # Disable scrolling intertia
            effect_x: ScrollEffect(friction=1)
            effect_y: ScrollEffect(friction=1)

            on_scroll_start: app.player.on_slider_seek_begin()
            on_scroll_move: app.player.position = self.scroll_x * app.player.duration
            on_scroll_stop: app.player.on_slider_seek_end()

            canvas.after:

                # Center line
                Color:
                    rgb: 1, 1, 1
                Line:
                    points: [self.width / 2, self.y, self.width / 2, self.y + self.height]

            # Pitch plot with padding on left and right, allowing the left and
            # right ends of the plot to align with the center line
            AnchorLayout:
                anchor_x: 'center'
                width: scroll_view.width + pitch_plot.width
                height: pitch_plot.height
                size_hint: (None, None)
                PitchPlot:
                    id: pitch_plot
                    size_hint: (None, None)


        # Player toolbar
        BoxLayout:
            orientation: 'horizontal'
            size_hint_y: None
            height: '48dp'
            padding: '8dp', '8dp'
            spacing: '8dp'

            canvas.before:
                Color:
                    rgba: 0.5, 0.5, 0.5, 0.5
                Rectangle:
                    pos: self.pos
                    size: self.size

            IconButton:
                icon: 'pause' if app.player.playing else 'play'
                on_release: app.player.playing = not app.player.playing
                size_hint_x: None
                size: icon_size
                pos_hint: {'center_y': 0.5}
            Label:
                text: "{} / {}".format(app.format_time(app.player.position), app.format_time(app.player.duration))
                size_hint_x: None
                pos_hint: {'center_y': 0.5}
                size: self.texture_size

            # Spacer
            Widget:
                size_hint_x: None
                width: '40dp'

            VerticalSeparator:
            IconButton:
                icon: 'zoom-horizontal'
                size_hint_x: None
                size: icon_size
            Slider:
                value: pitch_plot.xscale
                on_value: pitch_plot.xscale = self.value
                range: 1, 20

            VerticalSeparator:
            IconButton:
                icon: 'zoom-vertical'
                size_hint_x: None
                size: icon_size
            Slider:
                value: pitch_plot.yscale
                on_value: pitch_plot.yscale = self.value
                range: 1, 20


        # Looping toolbar
        BoxLayout:
            orientation: 'horizontal'
            size_hint_y: None
            height: '48dp'
            padding: '8dp', '8dp'
            spacing: '8dp'

            # Background
            canvas.before:
                Color:
                    rgba: 0.5, 0.5, 0.5, 0.3
                Rectangle:
                    pos: self.pos
                    size: self.size

            IconButton:
                icon: 'looping-enabled' if app.player.looping_enabled else 'looping-disabled'
                opacity: 1 if app.player.looping_enabled else 0.5
                size_hint_x: None
                size: icon_size
                on_press: app.player.looping_enabled = not app.player.looping_enabled

            Button:
                text: "Start"
                size_hint_x: None
                width: self.texture_size[0] * 3
                on_press: app.player.loop_start = app.player.position
            Button:
                text: app.format_time(app.player.loop_start)
                size_hint_x: None
                width: self.texture_size[0] * 3
                on_press: app.player.seek(app.player.loop_start)

            VerticalSeparator:

            Button:
                text: "End"
                size_hint_x: None
                width: self.texture_size[0] * 3
                on_press: app.player.loop_end = app.player.position
            Button:
                text: app.format_time(app.player.loop_end)
                size_hint_x: None
                width: self.texture_size[0] * 3
                on_press: app.player.seek(app.player.loop_end)


        # Speed control
        BoxLayout:
            orientation: 'horizontal'
            size_hint_y: None
            height: '48dp'
            padding: '8dp', '8dp'
            spacing: '8dp'

            Label:
                text: "Speed"
                size_hint_x: None
                width: self.texture_size[0]
            Slider:
                value: app.player.speed
                on_value: app.player.speed = self.value
                range: Player.speed.bounds
                step: 0.01
            Label:
                text: "{:0.2f}".format(app.player.speed)
                size_hint_x: None

        # Pitch controls
        BoxLayout:
            orientation: 'horizontal'
            size_hint_y: None
            height: '48dp'
            padding: '8dp', '8dp'
            spacing: '8dp'

            Label:
                text: "Transpose"
                size_hint_x: None
                width: self.texture_size[0]
            IconButton:
                icon: 'minus'
                size_hint_x: None
                size: small_icon_size
                on_release: app.player.increment_transpose(-1)
            Label:
                text: '{:+d}'.format(app.player.transpose)
                size_hint_x: None
                width: '32dp'
            IconButton:
                icon: 'plus'
                size_hint_x: None
                size: small_icon_size
                on_release: app.player.increment_transpose(1)

            VerticalSeparator:

            Label:
                text: "Tuning"
                size_hint_x: None
                width: self.texture_size[0]
            Slider:
                value: app.player.tuning
                on_value: app.player.tuning = self.value
                range: Player.tuning.bounds
            Label:
                text: '{:+d}'.format(int(round(app.player.tuning)))
                size_hint_x: None


<VerticalSeparator>
    size_hint_x: None
    width: '1dp'
    canvas:
        Color:
            rgba: 1, 1, 1, 0.5
        Line:
            points: self.x, self.y, self.x, self.y + self.height
