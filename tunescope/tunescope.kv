#:import ScrollEffect kivy.effects.scroll.ScrollEffect
#:import Factory kivy.factory.Factory
#:import Window kivy.core.window.Window

#:import Player tunescope.player.Player
#:import PitchPlot tunescope.visualization.PitchPlot
#:import IconButton tunescope.widgets.IconButton
#:import SelectionMarker tunescope.widgets.SelectionMarker


<MainWindow>:

    BoxLayout:
        width: root.width
        height: root.height
        orientation: 'vertical'


        # Main toolbar
        Toolbar:
            alt_color: True

            Button:
                size_hint_x: None
                width: dp(100)
                text: "Open"
                on_release: root.show_open_dialog()

            Button:
                id: recent_files_button
                size_hint_x: None
                width: dp(100)
                text: "Recent Files"
                on_press: root.show_recent_files_menu()


        # Media info bar
        Toolbar:
            orientation: 'vertical'
            height: self.minimum_height

            Label:
                text: app.player.title
                size_hint_y: None
                size: self.texture_size
                text_size: self.size
                halign: 'left'
                font_size: '20sp'
            Label:
                text: "{} - [i]{}[/i]".format(app.player.artist, app.player.album)
                markup: True
                size_hint_y: None
                size: self.texture_size
                text_size: self.size
                halign: 'left'


        RelativeLayout:
            id: scope_view_container

            # Scrolling pitch plot
            ScrollView:
                id: scroll_view
                scroll_type: ['bars', 'content']
                bar_width: dp(8)
                bar_color: 0.7, 0.7, 0.7, 0.9
                bar_inactive_color: 0.7, 0.7, 0.7, 0.6

                scroll_x: (app.player.position / app.player.duration) if app.player.duration > 0 else 0
                scroll_y: 0.5

                # Disable scrolling intertia
                effect_x: ScrollEffect(friction=1)
                effect_y: ScrollEffect(friction=1)

                on_scroll_start: app.player.on_slider_seek_begin()
                on_scroll_move: app.player.position = self.scroll_x * app.player.duration
                on_scroll_stop: app.player.on_slider_seek_end()

                canvas.before:
                    Color:
                        rgba: app.theme.pitch_plot_background_color
                    Rectangle:
                        pos: self.pos
                        size: self.size

                canvas.after:

                    # Center line
                    Color:
                        rgb: 1, 1, 1
                    Line:
                        points: [self.width / 2, self.y, self.width / 2, self.y + self.height]

                # Pitch plot with padding on left and right, allowing the left and
                # right ends of the plot to align with the center line
                AnchorLayout:
                    anchor_x: 'center'
                    anchor_y: 'center'
                    width: scroll_view.width + pitch_plot.width
                    height: pitch_plot.height + dp(10)
                    size_hint: None, None
                    PitchPlot:
                        id: pitch_plot
                        line_color: app.theme.pitch_plot_line_color
                        size_hint: None, None
                        width: app.player.duration * dp(120) * horizontal_zoom.value
                        height: scroll_view.height * vertical_zoom.value - dp(10)

            SelectionMarker:
                id: selection_start_marker

            SelectionMarker:
                id: selection_end_marker
                is_end_marker: True

            AnchorLayout:
                anchor_x: 'center'
                anchor_y: 'center'

                LoadingProgressIndicator:
                    id: loading_progress_indicator
                    percentage: root.loading_progress


        # Player toolbar
        Toolbar:
            LargeIconButton:
                icon: 'pause' if app.player.playing else 'play'
                on_press: app.player.playing = not app.player.playing
                pos_hint: {'center_y': 0.5}
            Label:
                text: "{} / {}".format(app.format_time(app.player.position), app.format_time(app.player.duration))
                font_name: 'DejaVuSans'
                size_hint_x: None
                size: self.texture_size

            # Spacer
            Widget:
                size_hint_x: None
                width: dp(40)

            VerticalSeparator:
            LargeIconButton:
                icon: 'zoom-horizontal'
            Slider:
                id: horizontal_zoom
                range: 1, 20

            VerticalSeparator:
            LargeIconButton:
                icon: 'zoom-vertical'
            Slider:
                id: vertical_zoom
                range: 1, 10


        # Selection toolbar
        Toolbar:
            alt_color: True

            LargeIconButton:
                icon: 'looping-enabled' if app.player.looping_enabled else 'looping-disabled'
                opacity: 1 if app.player.looping_enabled else 0.5
                on_press: app.player.looping_enabled = not app.player.looping_enabled

            Button:
                text: u"| \u25b6"
                font_name: 'DejaVuSans'
                size_hint_x: None
                width: self.texture_size[0] + dp(10)
                on_press: app.player.selection_start = app.player.position
            Button:
                text: app.format_time(app.player.selection_start)
                font_name: 'DejaVuSans'
                size_hint_x: None
                width: dp(100)
                on_press: app.player.seek(app.player.selection_start)

            VerticalSeparator:

            Button:
                text: u"\u25c0 |"
                font_name: 'DejaVuSans'
                size_hint_x: None
                width: self.texture_size[0] + dp(10)
                on_press: app.player.selection_end = app.player.position
            Button:
                text: app.format_time(app.player.selection_end)
                font_name: 'DejaVuSans'
                size_hint_x: None
                width: dp(100)
                on_press: app.player.seek(app.player.selection_end)


        # Speed control
        Toolbar:
            Label:
                text: "Speed"
                size_hint_x: None
                width: self.texture_size[0]
            Slider:
                value: app.player.speed
                on_value: app.player.speed = self.value
                range: Player.speed.bounds
                step: 0.01
            Label:
                text: "{:0.2f}".format(app.player.speed)
                size_hint_x: None


        # Pitch controls
        Toolbar:
            Label:
                text: "Transpose"
                size_hint_x: None
                width: self.texture_size[0]
            SmallIconButton:
                icon: 'minus'
                on_press: app.player.increment_transpose(-1)
            Label:
                text: '{:+d}'.format(app.player.transpose)
                size_hint_x: None
                width: dp(32)
            SmallIconButton:
                icon: 'plus'
                on_press: app.player.increment_transpose(1)

            VerticalSeparator:

            Label:
                text: "Tuning"
                size_hint_x: None
                width: self.texture_size[0]
            Slider:
                value: app.player.tuning
                on_value: app.player.tuning = self.value
                range: Player.tuning.bounds
            Label:
                text: '{:+d}'.format(int(round(app.player.tuning)))
                size_hint_x: None


<Toolbar@BoxLayout>:
    alt_color: False
    orientation: 'horizontal'
    size_hint_y: None
    height: dp(48)
    padding: dp(8), dp(8)
    spacing: dp(8)

    canvas.before:
        Color:
            rgba: app.theme.background_alt_color if root.alt_color else app.theme.background_color
        Rectangle:
            pos: self.pos
            size: self.size


<VerticalSeparator@Widget>:
    size_hint_x: None
    width: dp(1)
    canvas:
        Color:
            rgba: 1, 1, 1, 0.5
        Line:
            points: self.x, self.y, self.x, self.y + self.height


<IconButton>:
    color: app.theme.icon_color


<LargeIconButton@IconButton>:
    size_hint_x: None
    size: dp(40), dp(40)


<SmallIconButton@IconButton>:
    size_hint_x: None
    size: dp(32), dp(32)


<ITunesConfirmationPopup@Popup>:
    title: "Search iTunes Library?"
    auto_dismiss: False
    size_hint: 0.5, 0.5
    BoxLayout:
        width: root.width
        height: root.height
        orientation: 'vertical'
        Label:
            text_size: self.size
            halign: 'center'
            valign: 'middle'
            text: "This file contains no track information. May TuneScope search your iTunes library?"

        BoxLayout:
            orientation: 'horizontal'
            size_hint_y: None
            Button:
                id: no_button
                text: "No"

            Button:
                id: yes_button
                text: "Yes"


<ErrorDialog@Popup>:
    size_hint: None, None
    size: dp(400), dp(300)
    auto_dismiss: False
    message: "Unknown error"
    BoxLayout:
        orientation: 'vertical'
        Label:
            text: root.message
        Button:
            text: 'OK'
            size_hint_y: None
            height: dp(40)
            on_release: root.dismiss()


<SelectionMarker>:
    size_hint_x: None
    width: dp(24)

    canvas:
        Color:
            rgba: 1, 1, 1, 1
        Line:
            points: root.x, 0, root.x, self.height
            width: dp(1)

    Image:
        id: triangle
        x: root.x - (root.width if root.is_end_marker else 0)
        opacity: 0.5
        width: root.width
        height: dp(48)
        source: 'data/icons/png/selection-marker.png'
        mipmap: True

        canvas.before:
            PushMatrix
            Scale:
                x: -1 if root.is_end_marker else 1
                origin: root.pos
            Translate:
                x: 1 + (root.width if root.is_end_marker else 0)
        canvas.after:
            PopMatrix


<Label>:
    color: app.theme.text_color


<Button>:
    background_normal: 'data/widget-images/png/button.png'
    background_down: 'data/widget-images/png/button_pressed.png'
    color: app.theme.button_text_color
    background_color: app.theme.button_background_color


<Slider>:
    cursor_image: 'data/widget-images/png/slider_cursor.png'
    cursor_size: dp(24), dp(24)


<LoadingProgressIndicator@Label>:
    percentage: 0
    text: " {:d}%".format(self.percentage)
    font_size: dp(24)
    size_hint: None, None
    size: dp(100), dp(50)
    color: app.theme.progress_text_color
    opacity: 0
    halign: 'center'
    valign: 'middle'

    canvas.before:
        Color:
            rgba: app.theme.progress_background_color
        RoundedRectangle:
            pos: self.pos
            size: self.size
            radius: [dp(16)]


<RecentFilesDropDown@DropDown>:
    auto_width: False
    width: Window.width - self.x - dp(8)


<RecentFileItem@Button>:
    background_normal: ''
    background_down: ''
    size_hint_y: None
    height: dp(35)
    padding: dp(8), dp(0)
    halign: 'left'
    valign: 'middle'
    markup: True
    text_size: self.size
    title: ""
    artist: ""
    album: ""
    text: "{} - [i]{}, {}[/i]".format(self.title, self.artist, self.album)
    last: False


    canvas.after:
        Color:
            rgba: 1,1,1,0 if self.last else 0.25
        Line:
            points: self.x + dp(8), self.y, self.x + self.width - dp(8), self.y
            width: dp(1)
